
package com.soap.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BooksWebService", targetNamespace = "http://soap.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BooksWebService {


    /**
     * 
     * @return
     *     returns java.util.List<com.soap.client.Books>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBooks", targetNamespace = "http://soap.com/", className = "com.soap.client.GetBooks")
    @ResponseWrapper(localName = "getBooksResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.GetBooksResponse")
    @Action(input = "http://soap.com/BooksWebService/getBooksRequest", output = "http://soap.com/BooksWebService/getBooksResponse")
    public List<Books> getBooks();

    /**
     * 
     * @param booksAuthorfirst
     * @param booksGenre
     * @param bookPush
     * @param booksTitle
     * @param booksAuthorlast
     * @return
     *     returns java.lang.String
     * @throws ForIntException
     * @throws EmptyFieldException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createBooks", targetNamespace = "http://soap.com/", className = "com.soap.client.CreateBooks")
    @ResponseWrapper(localName = "createBooksResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.CreateBooksResponse")
    @Action(input = "http://soap.com/BooksWebService/createBooksRequest", output = "http://soap.com/BooksWebService/createBooksResponse", fault = {
        @FaultAction(className = EmptyFieldException.class, value = "http://soap.com/BooksWebService/createBooks/Fault/EmptyFieldException"),
        @FaultAction(className = ForIntException.class, value = "http://soap.com/BooksWebService/createBooks/Fault/ForIntException")
    })
    public String createBooks(
        @WebParam(name = "booksTitle", targetNamespace = "")
        String booksTitle,
        @WebParam(name = "booksAuthorfirst", targetNamespace = "")
        String booksAuthorfirst,
        @WebParam(name = "booksAuthorlast", targetNamespace = "")
        String booksAuthorlast,
        @WebParam(name = "booksGenre", targetNamespace = "")
        String booksGenre,
        @WebParam(name = "bookPush", targetNamespace = "")
        String bookPush)
        throws EmptyFieldException, ForIntException
    ;

    /**
     * 
     * @param booksId
     * @return
     *     returns java.lang.String
     * @throws ForIntException
     * @throws IdNotExistsException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteBooks", targetNamespace = "http://soap.com/", className = "com.soap.client.DeleteBooks")
    @ResponseWrapper(localName = "deleteBooksResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.DeleteBooksResponse")
    @Action(input = "http://soap.com/BooksWebService/deleteBooksRequest", output = "http://soap.com/BooksWebService/deleteBooksResponse", fault = {
        @FaultAction(className = ForIntException.class, value = "http://soap.com/BooksWebService/deleteBooks/Fault/ForIntException"),
        @FaultAction(className = IdNotExistsException.class, value = "http://soap.com/BooksWebService/deleteBooks/Fault/IdNotExistsException")
    })
    public String deleteBooks(
        @WebParam(name = "books_id", targetNamespace = "")
        String booksId)
        throws ForIntException, IdNotExistsException
    ;

    /**
     * 
     * @param booksAuthorfirst
     * @param booksGenre
     * @param bookPush
     * @param booksTitle
     * @param booksId
     * @param booksAuthorlast
     * @return
     *     returns java.lang.String
     * @throws ForIntException
     * @throws EmptyFieldException
     * @throws IdNotExistsException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateBooks", targetNamespace = "http://soap.com/", className = "com.soap.client.UpdateBooks")
    @ResponseWrapper(localName = "updateBooksResponse", targetNamespace = "http://soap.com/", className = "com.soap.client.UpdateBooksResponse")
    @Action(input = "http://soap.com/BooksWebService/updateBooksRequest", output = "http://soap.com/BooksWebService/updateBooksResponse", fault = {
        @FaultAction(className = EmptyFieldException.class, value = "http://soap.com/BooksWebService/updateBooks/Fault/EmptyFieldException"),
        @FaultAction(className = ForIntException.class, value = "http://soap.com/BooksWebService/updateBooks/Fault/ForIntException"),
        @FaultAction(className = IdNotExistsException.class, value = "http://soap.com/BooksWebService/updateBooks/Fault/IdNotExistsException")
    })
    public String updateBooks(
        @WebParam(name = "books_id", targetNamespace = "")
        String booksId,
        @WebParam(name = "booksTitle", targetNamespace = "")
        String booksTitle,
        @WebParam(name = "booksAuthorfirst", targetNamespace = "")
        String booksAuthorfirst,
        @WebParam(name = "booksAuthorlast", targetNamespace = "")
        String booksAuthorlast,
        @WebParam(name = "booksGenre", targetNamespace = "")
        String booksGenre,
        @WebParam(name = "bookPush", targetNamespace = "")
        String bookPush)
        throws EmptyFieldException, ForIntException, IdNotExistsException
    ;

}
